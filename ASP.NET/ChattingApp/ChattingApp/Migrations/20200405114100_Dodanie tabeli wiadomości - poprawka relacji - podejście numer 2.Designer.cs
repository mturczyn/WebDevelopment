// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ChattingApp.Models;

namespace ChattingApp.Migrations
{
    [DbContext(typeof(WebAppDbContext))]
    [Migration("20200405114100_Dodanie tabeli wiadomości - poprawka relacji - podejście numer 2")]
    partial class Dodanietabeliwiadomościpoprawkarelacjipodejścienumer2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChattingApp.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<int?>("SentById")
                        .HasColumnType("int");

                    b.Property<int?>("SentToId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeSent")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SentById");

                    b.HasIndex("SentToId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("ChattingApp.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ChattingApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ChattingApp.Models.UserToRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__UserToRo__AF2760ADCB5E81EA");

                    b.HasIndex("RoleId");

                    b.ToTable("UserToRole");
                });

            modelBuilder.Entity("ChattingApp.Models.Message", b =>
                {
                    b.HasOne("ChattingApp.Models.User", "SentBy")
                        .WithMany()
                        .HasForeignKey("SentById");

                    b.HasOne("ChattingApp.Models.User", "SentTo")
                        .WithMany()
                        .HasForeignKey("SentToId");
                });

            modelBuilder.Entity("ChattingApp.Models.UserToRole", b =>
                {
                    b.HasOne("ChattingApp.Models.Role", "Role")
                        .WithMany("UserToRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__UserToRol__RoleI__3B75D760")
                        .IsRequired();

                    b.HasOne("ChattingApp.Models.User", "User")
                        .WithMany("UserToRole")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserToRol__UserI__3A81B327")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
