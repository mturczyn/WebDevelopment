Notatki:
- przyglądając się facebookowi, widzimy, że każda wysłana wiadomość generuje metodę HTTP POST, której daną jest tresć wiadomości,

Zastanawiając się, jak wysłać wiadomość do serwera i móc ją u siebie wyświetlić, musimy:
- wysłać HTTP POST z wiadomością
- zaktualizować nasze UI
1 sposób: wysyłamy wiadomość, od razu wyświetlamy ją w UI
  Wada: jak wysyłanie się nie powiedzie, to wtedy stan naszej apki jest nieprawidłowy

2 sposób: wysyłamy, wyzwalając akcję kontrolera przyciskiem, a następnie pobieramy dane spowrotem z serwera,
jak pomyślnie wyślemy dane to je odbierzemy z powrotem, jak nie, to nie będziemy ich mieli
  Wada: po co dwa razy wysyłać zapytanie do serwera, wpierw z wiadomością, potem żeby ją pobrać.

3 sposób: wysyłamy wiadomość, ale akcja UI nie wywołuje bezpośrednio akcji kontrolera, ale wywołuje JSa,
który wysyła AJAXa, na którego dostaniemy odpowiedź i w zależności od niej możemy w JSie zaktualizować UI
bez konieczności pobierania ponownego danych.
  Wada: nie wiemy jak odebrać wiadomości od innych klientów. Potrzebujemy dostawać notyfikacje z serwera, serwer nam musi
  wysłać sam wiadomość na nasze urządzenie.

4 sposób: wykorzystanie biblioteki SignalR.

=== WYŚWIETLANIE WYSŁANYCH WIADOMOŚCI
Chcemy, aby uzytkwonik też widział co wysłał, zatem możemy wziąć po udanym wysłaniu wyswietlić użytkownikowi jego wiadomość.
Ale skąd wiemy, czy wiadomość została wysłana? Najlepszym pomysłem by było potwierdzenie ze strony klientów i wysłanie
do nadawcy potwierdzenia:
nadawca -- [wiadomość] --> serwer --> adresat
kod JS adresata -- [potwierdzenie] --> serwer --> nadawca

Zatem nadamy każdej wiadomości ID (w przyszłości może z bazy) i wyślemy potwierdzenie.

Okienko wysyłania wiadomości blokujemy do momentu otrzymania potwierdzenie.
UWAGA: jak sie nie powiedzie, to go nie odblokujemy, ale możemy jakiś timeout ustawić,
który stwierdzi, że wysłanie sie nie powiodło, i odblokuje okienko.

ARCHIWIZACJA WIADOMOŚCI
Należy zapisywać w bazie danych wiadomości użytkowników, także potrzebna jest tabela do zapisu wiadomości.
Tabela:
Message (
    Id (int/bigint),
    SentBy (login),
    SentTo (login),
    TimeSent (DateTime),
    IsRead (bit),
    MessageText (varchar),
)
Wyszukiwanie będzie najczęściej po uzytkownikach odbiorcach, dlatego dobrym pomysłem jest indeks na SentTo (jeśli klastrowy, to
Id musi być nieklastrowe, nawet chyba indeks nie będzie potrzebny).

OBSŁUGA NOWEGO WIDOKU CZATU ORAZ ARCHIWUM WIADOMOŚCI

Po wejsciu na stronę czatu nie mamy widoku czatu, tylko widok użytkowników.
- po wejściu na stronę wszystko jest zablokowane i w okienku czatu widnieje odpowiedni
 komunikat o wybraniu użytkownika

Po wybraniu użytkownika, ten użytkwonik musi być podświetlony.
- po kliknięciu po prostu zmienmy kolor temu elementowi HTML
Po wybraniu użytkownika wyświetlamy czat (po ponownym kliknięciu wybranego użytkownika ni sie nie dzieje).
- po wybraniu go, musimy sięgnąć do bazy, załadować ostatnie wiadomości i je wyświetlić (możnaby tu cache'ować wiadomości, aby nie pobierać ich z bazy za każdym razem)
CACHE'owanie: zrobimy sobie strukturę danych (Map bodajże, słownik), gdzie będziemy zapisywać wiadomości pobrane z bazy, dla każdego użytkownika pobierzemy po sto ostatnich wiadomości (na razie nie umożliwimy mu porania daleszej historii)

Po wejściu na czat, sprawdzamy czy mamy jakieś nieprzeczytane wiadmości.
Grupujemy je i bierzemy wszystkie ID nadawców, aby na liście użytkowinków je podświetlić (np. pulsująco czerwono).

Odbierając wiadomość u klietna, sprawdzamy czy nie mamy otwartego okienka z czatem (mamy obecnie wybrane ID użytkownika),
jeśli tak, wyświetlamy wiadomość, jeśli nie, robimy podświetlenie w liscie użytkowników.

OZNACZANIE WIADOMOŚCI JAKO PRZECZYTANEJ
Gdy uzytkownik otwiera okno rozmowy z danym uzytkownikiem, automatycznie wszystkie wiadomości w bazie oznaczamy
jako przeczytane.
Jeśli mamy otwartą rozmowę z użytwkonikiem, to podczas wysyłania potwierdzenia dostarczenia wiadomości możemy oznaczyć ją jako przeczytaną.